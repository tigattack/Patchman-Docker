name: Build

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: patchman
  docker_compose_down_flags: "--volumes -t=0"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    outputs:
      meta_json: ${{ steps.meta.outputs.json }}
    steps:
    - uses: actions/checkout@v4

    - uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ matrix.platform }}

    - uses: docker/setup-buildx-action@v3

    - name: Login to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Parse Patchman version
      run: |
        echo "VERSION=$(cat Dockerfile | grep 'ARG PATCHMAN_VERSION' | sed -r 's/.*="(.*)"/\1/')" >> $GITHUB_ENV

    - name: Extract branch name
      id: extract_branch
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
            type=semver,pattern={{version}},value=${{ env.VERSION }},enable={{is_default_branch}}
            type=semver,pattern={{major}}.{{minor}},value=${{ env.VERSION }},enable={{is_default_branch}}
            type=semver,pattern={{major}},value=${{ env.VERSION }},enable={{is_default_branch}}
            type=ref,event=pr

    - name: Build image
      uses: docker/build-push-action@v6
      id: build
      with:
        outputs: type=docker,dest=/tmp/${{ env.IMAGE_NAME }}.tar
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        platforms: ${{ matrix.platform }}
        cache-from:
          type=gha,scope=buildkit-${{ steps.extract_branch.outputs.branch }}-${{ matrix.platform }}
          type=gha,scope=buildkit-main-${{ matrix.platform }}
        cache-to: type=gha,scope=buildkit-${{ steps.extract_branch.outputs.branch }}-${{ matrix.platform }},mode=max
        provenance: false

    - name: Load image into runner docker daemon
      run: |
        docker load --input /tmp/${{ env.IMAGE_NAME }}.tar

    - name: Test run Docker Compose with a mariadb
      uses: ElParking/docker-compose-action@1.4.5
      id: test_mariadb
      with:
        compose-file: .github/test-mariadb/docker-compose.yml
        down-flags: ${{ env.docker_compose_down_flags }}
      env:
        IMAGE: "${{ steps.build.outputs.imageid }}"
        IMAGE_PLATFORM: ${{ matrix.platform }}
        PWD: ${{ github.workspace }}/.github/test-mariadb

    - name: Print Docker Compose logs for mariadb
      if: always() && (steps.test_mariadb.outcome == 'failure')
      env:
        IMAGE: "${{ steps.build.outputs.imageid }}"
        IMAGE_PLATFORM: ${{ matrix.platform }}
      run: |
        cd .github/test-mariadb
        docker compose ps -a
        docker compose logs -t --tail=all

    - name: Test run Docker Compose with a postgresql db
      uses: ElParking/docker-compose-action@1.4.5
      id: test_postgres
      with:
        compose-file: .github/test-postgres/docker-compose.yml
        down-flags: ${{ env.docker_compose_down_flags }}
      env:
        IMAGE: "${{ steps.build.outputs.imageid }}"
        IMAGE_PLATFORM: ${{ matrix.platform }}
        PWD: ${{ github.workspace }}/.github/test-postgres

    - name: Print Docker Compose logs for postgresql
      if: always() && (steps.test_postgres.outcome == 'failure')
      env:
        IMAGE: "${{ steps.build.outputs.imageid }}"
        IMAGE_PLATFORM: ${{ matrix.platform }}
      run: |
        cd .github/test-postgres
        docker compose ps -a
        docker compose logs -t --tail=all

    - name: Push image
      uses: docker/build-push-action@v6
      id: push-built-image
      with:
        # Push image without tags (i.e. digest only)
        outputs: type=image,name=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
        # Specifying tags here causes 'can't push tagged ref ghcr.io/tigattack/patchman:<tag> by digest'
        # tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        platforms: ${{ matrix.platform }}
        provenance: false

    - name: Export image digest
      run: |
        mkdir -p /tmp/digests
        digest="${{ steps.push-built-image.outputs.digest }}"
        touch "/tmp/digests/${digest#sha256:}"

    - name: Get platform name with safe characters
      run: |
        echo "PLATFORM_STR=$(sed 's/\//_/' <<< ${{ matrix.platform }})" >> $GITHUB_ENV

    - name: Upload image digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.PLATFORM_STR }}
        path: /tmp/digests/*
        if-no-files-found: error
        retention-days: 1

  # dedicated manifest merge job which runs after all platform specific build jobs are finished
  # see https://docs.docker.com/build/ci/github-actions/multi-platform/
  # see https://github.com/docker/build-push-action/issues/846
  merge-push-manifests:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'
    steps:
      - name: Download linux/amd64 image digests
        uses: actions/download-artifact@v5
        with:
          name: digests-linux_amd64
          path: /tmp/digests

      - name: Download linux/arm64 image digests
        uses: actions/download-artifact@v5
        with:
          name: digests-linux_arm64
          path: /tmp/digests

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Create manifest list, push, and inspect image
        working-directory: /tmp/digests
        # Should add manifest annotations when https://github.com/docker/buildx/issues/2148 is resolved.
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< '${{ needs.build.outputs.meta_json }}') \
            $(printf '${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)
          docker buildx imagetools inspect $(echo '${{ needs.build.outputs.meta_json }}' | jq -r '.tags[0]')
